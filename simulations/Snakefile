#!/usr/bin/env snakemake -s
##
## Runs CpG coverage simulations
##
## Started 12th Dec 2024

import os.path as op
import pandas as pd

# dictionary with keys being the dataset names => place this in the config
EXTERNAL_ORIGIN = {
  "lowReal": "ftp://ftp.ebi.ac.uk/pub/databases/scnmt_gastrulation/scnmt_gastrulation.tar.gz",
}

rule all:
  input: 
    "output/01_sim_data.html"

# every row in the parameter file is a parameterization of one simulation
rule check_required_data:
  input: 
    parameters_file="input/parameters.tsv"
  output: 
    required_data="data/required_data.tsv"
  run:
      required_datasets = []
      df = pd.read_csv(input.parameters_file, sep='\t')
      for index, row in df.iterrows():
        print(row["covParams"])
        if row["covParams"] in EXTERNAL_ORIGIN.keys():
          required_datasets.append(row["covParams"])
        elif row["transMat"] in EXTERNAL_ORIGIN.keys():
          required_datasets.append(row["transMat"])
        else: 
          continue
      required_datasets = list(set(required_datasets))
      with open(output.required_data, 'a') as file:
        for dataset in required_datasets:
          file.write(dataset + '\n')

rule download_data:
  input: 
    required_data="data/required_data.tsv"
  output: 
    downloaded_data="data/downloaded_data.tsv"
  threads: 
    2
  params:
    external_origin=lambda wildcards: " ".join(f"{k}={v}" for k, v in EXTERNAL_ORIGIN.items())
  shell:
   """
    declare -A external_origin
    for pair in {params.external_origin}; do
      IFS="=" read -r key value <<< "$pair"
      external_origin[$key]=$value
    done
   
    while read -r key; do
        echo external_origin[$key]
        curl --output data/$key.tar.gz ${{external_origin[$key]}}
        printf "%s\t%s\n"$key ${{external_origin[$key]}} >> {output.downloaded_data}
        mkdir -p data/$key && tar -xzvf data/$key.tar.gz -C data/$key/
    done < {input.required_data}
  """
  
rule simulate_data: 
 input: 
  parameters_path="input/parameters.tsv",
  downloaded_data="data/downloaded_data.tsv"
 output: 
    html_output_path="output/01_sim_data.html"
 conda:
    "envs/r_sim.yaml"
 shell: 
  """
    Rscript -e 'rmarkdown::render("src/01_sim_data.Rmd", "html_document", 
                                  output_file="../{output.html_output_path}",
                                  params=list(parameters_path="{input.parameters_path}"))'
  """


#rule visualize_coverage:
# save plots

#rule run_yamet

#rule visualize_yamet_results: