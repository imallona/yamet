#!/usr/bin/env snakemake -s
##
## Runs CpG coverage simulations
##
## Started 12th Dec 2024

import os.path as op
import pandas as pd
import csv

# dictionary with keys being the dataset names => place this in the config
EXTERNAL_ORIGIN = {
    "lowReal": "ftp://ftp.ebi.ac.uk/pub/databases/scnmt_gastrulation/scnmt_gastrulation.tar.gz",
}


rule all:
    input:
        "output/02_coverage_plots.html",
        "output/03_yamet_plots.html",
        "output/04_feat_diff.html",
        # "output/05_within_cell.html",
        # "output/06_between_cell.html",
        # "output/figures/simulations_emanuel.html"


# every row in the parameter file is a parameterization of one simulation
rule check_required_data:
    input:
        parameters_file="input/parameters.tsv",
    output:
        required_data="data/required_data.tsv",
    run:
        required_datasets = []
        df = pd.read_csv(input.parameters_file, sep="\t")
        for index, row in df.iterrows():
            print(row["covParams"])
            if row["covParams"] in EXTERNAL_ORIGIN.keys():
                required_datasets.append(row["covParams"])
            elif row["transMat"] in EXTERNAL_ORIGIN.keys():
                required_datasets.append(row["transMat"])
            else:
                continue
        required_datasets = list(set(required_datasets))
        with open(output.required_data, "a") as file:
            for dataset in required_datasets:
                file.write(dataset + "\n")


rule download_data:
    input:
        required_data="data/required_data.tsv",
    output:
        downloaded_data="data/downloaded_data.tsv",
    threads: 2
    params:
        external_origin=lambda wildcards: " ".join(
            f"{k}={v}" for k, v in EXTERNAL_ORIGIN.items()
        ),
    shell:
        """
          # Convert params.external_origin into a key-value file
          echo "{params.external_origin}" | tr ' ' '\\n' | awk -F= '{{{{print $1"\\t"$2}}}}' > external_origin.tsv

          while read -r key; do
              value=$(awk -v k="$key" '$1 == k {{{{print $2}}}}' external_origin.tsv)
              echo "$key -> $value"
              curl --output "data/$key.tar.gz" "$value"
              printf "%s\\t%s\\n" "$key" "$value" >> "{output.downloaded_data}"
              mkdir -p "data/$key" && tar -xzvf "data/$key.tar.gz" -C "data/$key/"
          done < "{input.required_data}"
        """


rule simulate_data:
    input:
        parameters_path="input/parameters.tsv",
        downloaded_data="data/downloaded_data.tsv",
    output:
        directory("output/sim_data"),
        "output/sim_data/sim_cell_9_50_50_rand_medium_lmr.tsv",
        html_output_path="output/01_sim_data.html",
    log:
        "logs/simulate_data_emanuel.log"
    conda:
        "envs/r_emanuel_sim.yaml"
    shell:
        """
        mkdir -p logs
        
        Rscript -e 'rmarkdown::render("src/01_sim_data.Rmd", "html_document", 
                                       output_file="../{output.html_output_path}",
                                       params=list(parameters_path="{input.parameters_path}"))' &> {log}
        """


rule visualize_coverage:
    input:
        sim_data_file="output/01_sim_data.html",
        sim_data_dir="output/sim_data",
        flag = "output/sim_data/sim_cell_9_50_50_rand_medium_lmr.tsv"
    output:
        html_output_path="output/02_coverage_plots.html",
    conda:
        "envs/r_plot.yaml"
    shell:
        """
          Rscript -e 'rmarkdown::render("src/02_coverage_plots.Rmd", "html_document", 
                                        output_file="../{output.html_output_path}",
                                        params=list(sim_data_dir="{input.sim_data_dir}"))'
        """


# """
# This is nowhere close to the entropy vs methylation etc plots we have on the paper,
# where is the sourcecode?
# maybe https://github.com/emsonder/smp-analysis/tree/master/simulations ?
# maybe https://github.com/emsonder/smp-analysis/blob/master/simulations/visualizationSim_sv.R ?
# """
# rule figure_simulations_emanuel:
#     input:
#         sim_data_file="output/01_sim_data.html",
#         sim_data_dir="output/sim_data",
#         another_report="output/02_coverage_plots.html"
#     output:
#         html_output_path="output/figures/simulations_emanuel.html",
#     conda:
#         "envs/r_plot.yaml"
#     shell:
#         """
#           mkdir -p output/figures
#           Rscript -e 'rmarkdown::render("src/figure_simulations_emanuel.Rmd", "html_document", 
#                                         output_file="../{output.html_output_path}",
#                                         params=list(sim_data_dir="{input.sim_data_dir}"))'
#         """


rule install_yamet:
    conda:
        "envs/yamet.yaml"
    output:
        op.join("build", "yamet"),
    shell:
        """
          bash ../method/build.sh
        """


def write_sim_interval_bed(file_path, chrom="chrSim", start=1, end=100000):
    """
    Writes a tab-separated file with a single line: chrom<tab>start<tab>end.

    Parameters
    ----------
    file_path : str
        Path to the output BED file.
    chrom : str, optional
        Chromosome name (default "chrSim").
    start : int, optional
        Start coordinate (default 1).
    end : int, optional
        End coordinate (default 100000).
    """
    with open(file_path, "w", newline="") as fh:
        writer = csv.writer(fh, delimiter="\t")
        writer.writerow([chrom, str(start), str(end)])

rule write_reference_file_for_emanuel:
    input:
        sim_data=op.join("output", "sim_data"),
        sim_data_file="output/01_sim_data.html"
    output:
        bed='emanuel_intervals.bed'
    threads: 1
    run:
        write_sim_interval_bed(file_path = output.bed)
        
rule run_yamet:
    conda:
        "envs/yamet.yaml"
    input:
        yamet=op.join("build", "yamet"),
        sim_data=op.join("output", "sim_data"),
        flag = "output/sim_data/sim_cell_9_50_50_rand_medium_lmr.tsv",
        sim_data_file="output/01_sim_data.html",
        bed='emanuel_intervals.bed'
    output:
        out=directory(op.join("output", "yamet", "out")),
        flag = 'output/yamet/out/10000.tsv'
    threads: 6
    params:
        ncpgs="50 100 1000 10000",
    shell:
        """
          mkdir -p {output.out}
          
          for ncpg in {params.ncpgs};
          do
             {input.yamet} --cell {input.sim_data}/sim_cell_*_*_${{ncpg}}_*.tsv \
                        --reference {input.sim_data}/cpgPositions_${{ncpg}}.tsv \
                        --intervals {input.bed} \
                        --out {output.out}/${{ncpg}}.tsv \
                        --cores {threads} \
                        --print-sampens F
          done
        """


rule visualize_yamet_results:
    conda:
        "envs/r_plot.yaml"
    input:
        yamet_dir="output/yamet/out",
        flag = "output/sim_data/sim_cell_9_50_50_rand_medium_lmr.tsv",
        another_flag = 'output/yamet/out/10000.tsv'
        flag = 'output/yamet/out/10000.tsv'
    output:
        html="output/03_yamet_plots.html",
    shell:
        """
          Rscript -e 'rmarkdown::render("src/03_yamet_plots.Rmd", "html_document", 
                                        output_file="../{output.html}",
                                        params=list(yamet_dir="{input.yamet_dir}"))'
        """


rule feat_diff_template:
    conda:
        "envs/r_sim.yaml"
    output:
        "output/feat_diff/intervals.{N}.{f}.tsv",
    script:
        "src/feat_diff/createTemplate.R"


rule feat_diff_samples:
    conda:
        "envs/r_sim.yaml"
    input:
        "output/feat_diff/intervals.{N}.{f}.tsv",
    output:
        touch("output/feat_diff/{N}.{f}.flag"),
    params:
        samples=50,
        data="output/feat_diff",
    script:
        "src/feat_diff/getSamples.R"


rule feat_diff_yamet:
    conda:
        "envs/yamet.yaml"
    input:
        "output/feat_diff/{N}.{f}.flag",
        yamet=op.join("build", "yamet"),
    output:
        det_out="output/feat_diff/yamet.{N}.{f}.det.out",
    params:
        data="output/feat_diff",
    threads: 3
    shell:
        """
          {input.yamet} --cell {params.data}/sim.*.tsv \
                        --reference {params.data}/ref.{wildcards.N}.{wildcards.f}.tsv \
                        --intervals {params.data}/intervals.{wildcards.N}.{wildcards.f}.tsv \
                        --det-out {output.det_out} \
                        --meth-out {params.data}/yamet.{wildcards.N}.{wildcards.f}.meth.out \
                        --cores {threads} \
                        --print-sampens F
        """


rule feat_diff_plots:
    conda:
        "envs/r_plot.yaml"
    input:
        det_out="output/feat_diff/yamet.500.200.det.out",
    params:
        N=lambda wildcards, input: input.det_out.split(".")[1],
        f=lambda wildcards, input: input.det_out.split(".")[2],
    output:
        html="output/04_feat_diff.html",
    script:
        "src/feat_diff/04_feat_diff.Rmd"


rule within_cell_template:
    conda:
        "envs/r_sim.yaml"
    output:
        "output/within_cell/intervals.{S}.{N}.{f}.tsv",
    script:
        "src/within_cell/createTemplate.R"


rule within_cell_samples:
    conda:
        "envs/r_sim.yaml"
    input:
        "output/within_cell/intervals.{S}.{N}.{f}.tsv",
    output:
        "output/within_cell/sim.{s}.{S}.{N}.{f}.tsv",
    params:
        data="output/within_cell",
    script:
        "src/within_cell/getSamples.R"


rule within_cell_yamet:
    conda:
        "envs/yamet.yaml"
    input:
        cells=lambda wildcards: expand(
            "output/within_cell/sim.{s}.{{S}}.{{N}}.{{f}}.tsv",
            s=range(1, int(wildcards.S) + 1),
        ),
        yamet=op.join("build", "yamet"),
    output:
        det_out="output/within_cell/yamet.{S}.{N}.{f}.det.out",
    params:
        data="output/within_cell",
    threads: 4
    benchmark:
        repeat("output/within_cell/yamet.{S}.{N}.{f}.benchmark", 5)
    shell:
        """
          {input.yamet} --cell {input.cells} \
                        --reference {params.data}/ref.{wildcards.N}.{wildcards.f}.tsv \
                        --intervals {params.data}/intervals.{wildcards.S}.{wildcards.N}.{wildcards.f}.tsv \
                        --skip-header-intervals \
                        --det-out {output.det_out} \
                        --meth-out {params.data}/yamet.{wildcards.S}.{wildcards.N}.{wildcards.f}.meth.out \
                        --cores {threads} \
                        --print-sampens F
        """


rule within_cell_scmet:
    conda:
        "envs/r_plot.yaml"
    input:
        "output/within_cell/yamet.{S}.{N}.{f}.det.out",
    output:
        "output/within_cell/scmet.{S}.{N}.{f}.rds",
    threads: 4
    benchmark:
        repeat("output/within_cell/scmet.{S}.{N}.{f}.benchmark", 5)
    script:
        "src/scmet.R"


WC_S_GRID = {"S": [20, 40, 60, 80, 100], "N": 300, "f": 641}
WC_N_GRID = {"S": 30, "N": [100, 200, 300, 400, 500], "f": 641}
WC_DISP = {"S": 20, "N": 500, "f": 321}


# specify the input yamet file with the specifications needed in the form
# yamet.{number of samples}.{number of features}.{length of each feature}.det.out
# the length of each feature here must be of the form 8n+1
rule within_cell_plots:
    conda:
        "envs/r_plot.yaml"
    input:
        s_scmets=expand(
            "output/within_cell/scmet.{S}.{N}.{f}.rds",
            S=WC_S_GRID["S"],
            N=WC_S_GRID["N"],
            f=WC_S_GRID["f"],
        ),
        n_scmets=expand(
            "output/within_cell/scmet.{S}.{N}.{f}.rds",
            S=WC_N_GRID["S"],
            N=WC_N_GRID["N"],
            f=WC_N_GRID["f"],
        ),
        disp_scmet=f"output/within_cell/scmet.{WC_DISP["S"]}.{WC_DISP["N"]}.{WC_DISP["f"]}.rds",
    params:
        S_GRID=WC_S_GRID,
        N_GRID=WC_N_GRID,
        DISP=WC_DISP,
    threads: 4
    output:
        html="output/05_within_cell.html",
    script:
        "src/within_cell/05_within_cell.Rmd"


rule between_cell_template:
    conda:
        "envs/r_sim.yaml"
    output:
        "output/between_cell/intervals.{S}.{N}.{f}.tsv",
    script:
        "src/between_cell/createTemplate.R"


rule between_cell_samples:
    conda:
        "envs/r_sim.yaml"
    input:
        "output/between_cell/intervals.{S}.{N}.{f}.tsv",
    output:
        "output/between_cell/sim.{s}.{S}.{N}.{f}.tsv",
    params:
        data="output/between_cell",
    script:
        "src/between_cell/getSamples.R"


rule between_cell_yamet:
    conda:
        "envs/yamet.yaml"
    input:
        cells=lambda wildcards: expand(
            "output/between_cell/sim.{s}.{{S}}.{{N}}.{{f}}.tsv",
            s=range(1, int(wildcards.S) + 1),
        ),
        yamet=op.join("build", "yamet"),
    output:
        det_out="output/between_cell/yamet.{S}.{N}.{f}.det.out",
    params:
        data="output/between_cell",
    threads: 4
    benchmark:
        repeat("output/between_cell/yamet.{S}.{N}.{f}.benchmark", 5)
    shell:
        """
          {input.yamet} --cell {params.data}/sim.*.{wildcards.S}.{wildcards.N}.{wildcards.f}.tsv \
                        --reference {params.data}/ref.{wildcards.N}.{wildcards.f}.tsv \
                        --intervals {params.data}/intervals.{wildcards.S}.{wildcards.N}.{wildcards.f}.tsv \
                        --skip-header-intervals \
                        --det-out {output.det_out} \
                        --meth-out {params.data}/yamet.{wildcards.S}.{wildcards.N}.{wildcards.f}.meth.out \
                        --cores {threads} \
                        --print-sampens F
        """


rule between_cell_scmet:
    conda:
        "envs/r_plot.yaml"
    input:
        "output/between_cell/yamet.{S}.{N}.{f}.det.out",
    output:
        "output/between_cell/scmet.{S}.{N}.{f}.rds",
    threads: 4
    benchmark:
        repeat("output/between_cell/scmet.{S}.{N}.{f}.benchmark", 5)
    script:
        "src/scmet.R"


BC_S_GRID = {"S": [20, 40, 60, 80, 100], "N": 200, "f": 100}
BC_N_GRID = {"S": 30, "N": [100, 200, 300, 400, 500], "f": 100}
BC_DISP = {"S": 20, "N": 500, "f": 200}


# specify the input yamet file with the specifications needed in the form
# yamet.{number of samples}.{number of features}.{length of each feature}.det.out
rule between_cell_plots:
    conda:
        "envs/r_plot.yaml"
    input:
        s_scmets=expand(
            "output/between_cell/scmet.{S}.{N}.{f}.rds",
            S=BC_S_GRID["S"],
            N=BC_S_GRID["N"],
            f=BC_S_GRID["f"],
        ),
        n_scmets=expand(
            "output/between_cell/scmet.{S}.{N}.{f}.rds",
            S=BC_N_GRID["S"],
            N=BC_N_GRID["N"],
            f=BC_N_GRID["f"],
        ),
        disp_scmet=f"output/between_cell/scmet.{BC_DISP["S"]}.{BC_DISP["N"]}.{BC_DISP["f"]}.rds",
    params:
        S_GRID=BC_S_GRID,
        N_GRID=BC_N_GRID,
        DISP=BC_DISP,
    threads: 4
    output:
        html="output/06_between_cell.html",
    script:
        "src/between_cell/06_between_cell.Rmd"
