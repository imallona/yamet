#!/usr/bin/env snakemake -s
##
## Runs yamet
##
## See https://github.com/emsonder/MethQuant-analysis/blob/cleanup/01_ecker_brain_atlas_2021/01_get_regions.sh
##   for further annotations
##
## Started 2nd Dec 2024

import os.path as op

rule all:
    input:
        # op.join('ecker_data', 'downloaded.flag'),
        op.join('annotation', 'mm10', 'done.flag')
    
rule download_ecker_metadata:
    conda:
        "envs/yamet.yml"
    output:
        meta = op.join('ecker_data', 'MOp_Metadata.tsv.gz')
    params:
        path = 'ecker_data'
    shell:
        """
        mkdir -p {params.path}
        curl "https://data.nemoarchive.org/biccn/grant/u19_cemba/cemba/epigenome/sncell/mCseq/mouse/processed/analysis/EckerRen_Mouse_MOp_methylation_ATAC/metadata/mc/MOp_Metadata.tsv.gz" -o {output.meta}
        """

rule download_ecker:
    conda:
        "envs/yamet.yml"
    input:
        meta = op.join('ecker_data', 'MOp_Metadata.tsv.gz')
    output:
        raw_urls = temp(op.join('ecker_data', 'raw_urls')),
        urls = op.join('ecker_data', 'urls'),
        flag = op.join('ecker_data', 'downloaded.flag')
        
    params:
        base_url = "https://data.nemoarchive.org/biccn/grant/u19_cemba/cemba/epigenome/sncell/mCseq/mouse/processed/counts/",
        path = 'ecker_data/'
    threads:
        2
    shell:
        """
        zcat {input.meta} | cut -f2 | grep -v AllcPath > {output.raw_urls}
        sed 's\\/gale/raidix/rdx-4/CEMBA_RS1/\\{params.base_url}\\g' {output.raw_urls} | \
           sed 's\\/allc/\\/\\g' | sed 's\\.gz\\.tar\\g' > {output.urls}
        
        wget -i {output.urls} --directory-prefix={params.path}
        touch {output.flag}
        """

rule download_mm10_annotation_for_ecker:
    conda:
        op.join("envs", "yamet.yml")
    input:
        promoters = op.join('annotation', 'mm10', 'promoters.bed.gz'),
        txs = op.join('annotation', 'mm10', 'transcripts.bed.gz'),
        encode = op.join('annotation', 'mm10', 'h3k27ac.bed.gz')
    output:
        flag = op.join('annotation', 'mm10', 'done.flag')
    params:
        path = op.join('annotation', 'mm10')
    threads:
        1
    shell:
        """
        date > {output.flag}
        """
    
rule download_mm10_promoters:
    conda:
        op.join("envs", "yamet.yml")
    output:
        promoters = op.join('annotation', 'mm10', 'promoters.bed.gz')    
    params:
        path = op.join('annotation', 'mm10')
    threads:
        1
    shell:
        """
        bash src/download_mm10_promoters.sh | gzip -c > {output.promoters}
        """

rule download_mm10_transcripts:
    conda:
        op.join("envs", "yamet.yml")
    output:
        txs = op.join('annotation', 'mm10', 'transcripts.bed.gz')
    params:
        path = op.join('annotation', 'mm10')
    threads:
        1
    shell:
        """
        bash src/download_mm10_transcripts.sh | gzip -c > {output.txs}
        """
        
rule download_mm10_encode:
    conda:
        op.join("envs", "yamet.yml")
    output:
        last = op.join('annotation', 'mm10','h3k27ac.bed.gz')
    params:
        path = op.join('annotation', 'mm10')
    threads:
        1
    shell:
        """
        bash src/download_encode_mm10_epigenomics.sh
        """

# ## data download - pending stuff

# def download_scnmt_gastrulation():
#     return NULL

# ## perhaps lines and sines separately?
# def download_mm10_repeats(assembly = 'mm10'):
#     return NULL

