#!/usr/bin/env snakemake -s
##
## Runs yamet
##
## See https://github.com/emsonder/MethQuant-analysis/blob/cleanup/01_ecker_brain_atlas_2021/01_get_regions.sh
##   for further annotations
##
## Started 2nd Dec 2024

import os.path as op
import pandas as pd
        
## the shuffling is to have as many permutations as len(seed) of each of the annotations, to build
##   multiple entropy background distributions
rule all:
    input:
        op.join('ecker_data', 'downloaded_ecker.flag'), ## this is to download Ecker's cytosine reports
        op.join('annotation', 'mm10', 'done.flag'), ## this to download regions for Ecker's
        op.join('ecker_data', 'harmonized_ecker_metadata.tsv.gz'), ## this to download Ecker's metadata
        op.join('crc_data', 'downloaded_crc.flag'), # this to download CRC cytosine reports
        expand(op.join('annotation', 'shuffled', '{assembly}', '{seed}', '{annotation}.bed.gz'),
               seed = [1,2],
               assembly = 'mm10',
               annotation = ['transcripts', 'promoters']), ## to get a random background features
        op.join('feature_simulations', 'output', 'yamet_detailed.out') ## feature simulations

## yamet is compiled by install_yamet and exported for each shell directive
shell.prefix("export PATH=../method/build:$PATH;")

rule install_yamet:
    conda:
        "envs/yamet.yml" # for cmake mainly
    output:
        op.join("..", "method", "build", "yamet")
    shell:
        """
        bash ../method/build.sh
        """

rule download_nemo_ecker_metadata:
    conda:
        "envs/yamet.yml"
    output:
        meta = op.join('ecker_data', 'MOp_Metadata.tsv.gz')
    params:
        path = 'ecker_data'
    shell:
        """
        mkdir -p {params.path}
        curl "https://data.nemoarchive.org/biccn/grant/u19_cemba/cemba/epigenome/sncell/mCseq/mouse/processed/analysis/EckerRen_Mouse_MOp_methylation_ATAC/metadata/mc/MOp_Metadata.tsv.gz" -o {output.meta}
        """

rule download_ecker_paper_metadata:
    conda:
        "envs/yamet.yml"
    output:
        meta = op.join('ecker_data', '41586_2020_3182_MOESM9_ESM.xlsx')#,
        # csv = op.join('ecker_data', '41586_2020_3182_MOESM9_ESM.csv')
    params:
        path = 'ecker_data'
    shell:
        """
        mkdir -p {params.path}
        curl "https://static-content.springer.com/esm/art%3A10.1038%2Fs41586-020-03182-8/MediaObjects/41586_2020_3182_MOESM9_ESM.xlsx" -o {output.meta}
        # ssconvert {output.meta} output.meta_csv
        """

rule harmonize_ecker_metadata:
    conda:
        "envs/r.yml"
    input:
        paper = op.join('ecker_data', '41586_2020_3182_MOESM9_ESM.xlsx'),
        nemo = op.join('ecker_data', 'MOp_Metadata.tsv.gz')
    output:
        metadata = op.join('ecker_data', 'harmonized_ecker_metadata.tsv.gz')
    params:
        path = 'ecker_data'
    script:        
        'src/harmonize_ecker_metadata.R'
        
    
# ## reports the AllcPath (basename) of cells matching the harmonized metadata
# ##   'column' equals 'value'
# def slice_eckers_metadata(column, value):
#     meta_fn = op.join('ecker_data','harmonized_ecker_metadata.tsv.gz')
    
#     if not op.exists(meta_fn):
#         raise Exception("No metadata found.")
    
#     meta = pd.read_csv(filepath_or_buffer = meta_fn,
#                        sep='\t',
#                        compression='gzip', header=0, quotechar='"')
    
#     if set([column]).issubset(meta.columns):
#         return [i for i in meta[meta[column] == value]['basename']]
#     else:
#         return None

# ## this is a long one!
# print(slice_eckers_metadata('SubType', 'IT-L4 Shc3'))

rule download_ecker:
    conda:
        "envs/yamet.yml"
    input:
        meta = op.join('ecker_data', 'MOp_Metadata.tsv.gz')
    output:
        raw_urls = temp(op.join('ecker_data', 'raw_urls')),
        urls = op.join('ecker_data', 'urls'),
        flag = op.join('ecker_data', 'downloaded_ecker.flag')
        
    params:
        base_url = "https://data.nemoarchive.org/biccn/grant/u19_cemba/cemba/epigenome/sncell/mCseq/mouse/processed/counts/",
        path = 'ecker_data/'
    threads:
        2
    shell:
        """
        zcat {input.meta} | cut -f2 | grep -v AllcPath > {output.raw_urls}
        sed 's\\/gale/raidix/rdx-4/CEMBA_RS1/\\{params.base_url}\\g' {output.raw_urls} | \
           sed 's\\/allc/\\/\\g' | sed 's\\.gz\\.tar\\g' > {output.urls}
        
        wget -i {output.urls} --directory-prefix={params.path}
        touch {output.flag}
        """

rule download_mm10_annotation_for_ecker:
    conda:
        op.join("envs", "yamet.yml")
    input:
        promoters = op.join('annotation', 'mm10', 'promoters.bed.gz'),
        txs = op.join('annotation', 'mm10', 'genes.bed.gz'),
        encode = op.join('annotation', 'mm10', 'h3k27ac.bed.gz')
    output:
        flag = op.join('annotation', 'mm10', 'done.flag')
    params:
        path = op.join('annotation', 'mm10')
    threads:
        1
    shell:
        """
        date > {output.flag}
        """
    
rule download_mm10_promoters:
    conda:
        op.join("envs", "yamet.yml")
    output:
        promoters = op.join('annotation', 'mm10', 'promoters.bed.gz')    
    params:
        path = op.join('annotation', 'mm10')
    threads:
        1
    shell:
        """
        bash src/download_mm10_promoters.sh | gzip -c > {output.promoters}
        """

rule download_mm10_genes:
    conda:
        op.join("envs", "yamet.yml")
    output:
        txs = op.join('annotation', 'mm10', 'genes.bed.gz')
    params:
        path = op.join('annotation', 'mm10')
    threads:
        1
    shell:
        """
        bash src/download_mm10_genes.sh | gzip -c > {output.txs}
        """
        
rule download_mm10_encode:
    conda:
        op.join("envs", "yamet.yml")
    output:
        last = op.join('annotation', 'mm10', 'h3k27ac.bed.gz')
    params:
        path = op.join('annotation', 'mm10')
    threads:
        1
    shell:
        """
        bash src/download_encode_mm10_epigenomics.sh
        """

rule get_mm10_genome_sizes:
    conda:
        op.join("envs", "yamet.yml")
    output:
        genome = op.join('annotation', 'mm10','genome.sizes')
    params:
        path = op.join('annotation', 'mm10')
    threads:
        1
    shell:
        """
        bash src/download_mm10_genome_sizes.sh > {output.genome}
        """
        
rule shuffle_background:
    conda:
        op.join("envs", "yamet.yml")
    input:
        bed = op.join('annotation', '{assembly}', '{annotation}.bed.gz'),
        genome = op.join('annotation', '{assembly}','genome.sizes')
    output:
        op.join('annotation', 'shuffled','{assembly}', '{seed}', '{annotation}.bed.gz')
    params:
        path = op.join('annotation', 'shuffled','{assembly}', '{seed}')
    shell:
        """
        mkdir -p {params.path}
        zcat {input.bed} | \
            bedtools shuffle -i - -g {input.genome} -seed {wildcards.seed} | \
            gzip -c > {output}
        """

## how do we run yamet? in batches of cells? how to automate this so the shuffled backgrounds
##   are coupled as well?
##  we can use `slice_eckers_metadata(column, value)` to generate the cell inputs
rule run_yamet:
    conda:
        op.join("envs", "yamet.yml")
    input:
        bed = op.join('annotation', 'mm10', '{annotation}.bed.gz'),
        genome = op.join('annotation', 'mm10','genome.sizes')
    output:
        detailed = op.join('yamet', '{annotation}', '{cells}')
    message:
        """
        echo running yamet on {input.bed} and {input.annotation}
        """
    shell:
        """
        echo 'not implemented but slice_eckers_metadata(column, value) is key'
        """

rule download_crc:
    conda:
        op.join("envs", "yamet.yml")
    output:
        crc = op.join('crc_data', 'downloaded_crc.flag')
    params:
        crc_path = 'crc_data'
    message:
        """
        CRC download
        """
    shell:
        """
        mkdir -p {params.crc_path}
        bash src/get_crc_meth_files.sh
        mv crc_done.flag {params.crc_path}
        mv G*singleC.txt.gz {params.crc_path}
        """

# ## data download - pending stuff

rule simulate_features:
    conda:
        op.join("envs", "yamet.yml")
    output:
        cell = op.join('feature_simulations', 'output', 'simulations.tsv'),
        reference = op.join('feature_simulations', 'output', 'reference.tsv'),
        regions = op.join('feature_simulations', 'output', 'regions.bed')
    params:
        path = op.join('feature_simulations', 'output')        
    shell:
        """
        mkdir -p {params.path}
        Rscript src/feature_simulation.R
        mv regions.bed {params.path}
        mv simulations.tsv {params.path}
        mv reference.tsv {params.path}
        """

rule run_yamet_simulated_features:
    conda:
        op.join("envs", "yamet.yml")
    input:
        yamet = op.join("..", "method", "build", "yamet"),
        cell = op.join('feature_simulations', 'output', 'simulations.tsv'),
        reference = op.join('feature_simulations', 'output', 'reference.tsv'),
        regions = op.join('feature_simulations', 'output', 'regions.bed')
    output:
        out = op.join('feature_simulations', 'ouput', 'yamet_summarized.out'),
        detailed_output = op.join('feature_simulations', 'output', 'yamet_detailed.out')
    threads:
        4
    log:
        op.join('feature_simulations', 'run.log')
    shell:
        """
        yamet --cell {input.cell} \
              --reference {input.reference} \
              --intervals {input.regions} \
              --det-out {output.detailed_output} \
              --out {output.out} \
              --cores {threads} \
              --print-intervals &> {log}        
        """

# def download_scnmt_gastrulation():
#     return NULL

# ## perhaps lines and sines separately?
# def download_mm10_repeats(assembly = 'mm10'):
#     return NULL

