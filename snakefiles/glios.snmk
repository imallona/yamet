# todo
# ensure the bam file is not empty after subset by chrom

import os
# import glob
import re
import pandas as pd
from snakemake.utils import validate

configfile: "config.yaml"
validate(config, "schemas/config.schema.yaml")
Rbin = config['software']['Rbin']
CHROMS = config['params']['chromosomes']
MINCOVERAGE = config['params']['min_coverage']
NTHREADS = config['params']['num_threads']

samples = pd.read_csv(config["samples"], sep = '\t').set_index("id", drop=False)
print(samples)
validate(samples, schema="schemas/samples.schema.yaml")

# print(samples.to_dict()['bam'].values())

# BAMS = [str(bam) for bam in samples.to_dict()['bam'].values()]
BAMS = samples.to_dict()['bam']
# print(BAMS)

# BAMS = ["bismark/%s/%s.bam"% (a, a)] # get the bamfiles from the config, easier

METHTUPLE = expand("{sample}/qnsorted_{sample}_{chrom}.CG.2.tsv",
                   sample =  BAMS.keys(),
                   chrom = CHROMS)

AWK = expand("{sample}/qnsorted_{sample}_{chrom}.CG.2_cov_{cov}.tsv",
             sample =  BAMS.keys(),
             chrom = CHROMS,
             cov = MINCOVERAGE)

METHYLATIONS =  {os.path.splitext(os.path.basename(sample))[0] :
                 expand("{sample}/qnsorted_{sample}_{chrom}_cov_{cov}_methylation.bed",
                        sample =  sample,
                        chrom = CHROMS,
                        cov = MINCOVERAGE) for sample in BAMS}

ENTROPIES =  {os.path.splitext(os.path.basename(sample))[0] :
              expand("{sample}/qnsorted_{sample}_{chrom}_cov_{cov}_entropy.bed",
                     sample =  sample,
                     chrom = CHROMS,
                     cov = MINCOVERAGE) for sample in BAMS}

MERGED_ENTROPY = expand("{sample}/{sample}_cov_{cov}_entropy.bed.gz",
                        sample = BAMS.keys(),
                           cov = MINCOVERAGE)

MERGED_METHYLATION = expand( "{sample}/{sample}_cov_{cov}_methylation.bed.gz",
                             sample = BAMS.keys(),
                             cov = MINCOVERAGE)

rule all:
    input:
        AWK, METHTUPLE, MERGED_METHYLATION, MERGED_ENTROPY

rule run_sample_report:
    input:
        colored_entropy =  "{sample}/{sample}_cov_{cov}_entropy_and_meth_hmm_{hmm}.bed.gz",
        script = 'scripts/report.R'
    log:
         "{sample}/{sample}_cov_{cov}_hmm_{hmm}_report.log"
    output:
        "{sample}/{sample}_cov_{cov}_hmm_{hmm}.test"
    # script:
    #     "scripts/report.R"
    shell:
        '''{Rbin} CMD BATCH --no-restore --no-save \
        "--args colored_entropy='{input.colored_entropy}' \
        output='{output}'" {input.script} {log}'''


rule add_methylation_to_entropy_file:
    input:
        methylation = "{sample}/{sample}_cov_{MINCOVERAGE}_methylation.bed.gz",
        entropy = "{sample}/{sample}_cov_{MINCOVERAGE}_entropy.bed.gz"
    output:
        "{sample}/{sample}_cov_{MINCOVERAGE}_entropy_and_meth.bed.gz"
    shell:
        """
        # merge
        command=paste
        for i in {input.entropy} {input.methylation}
        do
          command="$command <(gzip -cd $i)"
        done
  
        eval $command | cut -f1-6,11 | dos2unix | gzip > {output}
        """

rule merge_methylations:
    input:
        lambda wildcards: METHYLATIONS[wildcards.sample]
    output:
        temp("{sample}/{sample}_cov_{cov}_methylation.bed.gz")
    shell:
        "cat {input} | bedtools sort | gzip > {output}"

rule merge_entropies:
    priority: 70
    input:
         lambda wildcards: ENTROPIES[wildcards.sample]
    output:
        temp("{sample}/{sample}_cov_{MINCOVERAGE}_entropy.bed.gz")
    shell:
        "cat {input} | bedtools sort | gzip > {output}"
        
rule get_methylation:
    input:
        "{sample}/qnsorted_{sample}_{chrom}.CG.2_cov_{MINCOVERAGE}.tsv"
    output:
        temp("{sample}/qnsorted_{sample}_{chrom}_cov_{MINCOVERAGE}_methylation.bed")
    shell:
        """
        awk '
BEGIN {{OFS=FS="\t"}}
NR == 1 {{next}}
{{
  print $1,$3,$4,"MM"$5";MU"$6";UM"$7";UU"$8,(($5+(0.5*$6)+(0.5*$7))/($5+$6+$7+$8)),$2
}}' {input} > {output}
"""
   
rule get_entropy:
    input:
        "{sample}/qnsorted_{sample}_{chrom}.CG.2_cov_{MINCOVERAGE}.tsv"
    output:
        temp("{sample}/qnsorted_{sample}_{chrom}_cov_{MINCOVERAGE}_entropy.bed")
    shell:
        """
        awk '
BEGIN {{OFS=FS="\t"}}
NR == 1 {{next}}
{{
  H["MM"] = $5
  H["UU"] = $8
  H["UM"] = $7
  H["MU"] = $6
  N  = ($5+$6+$7+$8)
  E = 0
  p = ""
  for (i in H) {{
    if (H[i] != 0) {{
      p = H[i]/N;
      E -=  p * log(p);
    }}
  }}

  print $1,$3,$4,"MM"$5";MU"$6";UM"$7";UU"$8,E,$2

}}' {input} > {output}
"""

rule filter_by_coverage:
       input:
           "{sample}/qnsorted_{sample}_{chrom}.CG.2.tsv"
       output:
           temp("{sample}/qnsorted_{sample}_{chrom}.CG.2_cov_{MINCOVERAGE}.tsv")
       shell:
           """
           awk -v mincov="{MINCOVERAGE}" '
           NR == 1 {{next}}
           {{
            if (($5+$6+$7+$8) >= mincov) print $0
           }}' {input} > {output}
           """
                   
rule run_meththuple:
    priority: 80
    input:
        "{sample}/qnsorted_{sample}_{chrom}.bam"
    output:
        "{sample}/qnsorted_{sample}_{chrom}.CG.2.tsv"
    shell: """
        set +u;
        # source ~/virtenvs/methtuple/bin/activate
        methtuple -m 2 --methylation-type CG {input}    
        # deactivate
        set -u;
        """

rule sort_by_queryname:
    priority: 90
    input:
        "{sample}/{sample}_{chrom}.bam"
    output:
        temp("{sample}/qnsorted_{sample}_{chrom}.bam")
    threads: NTHREADS
    shell:
        """
        samtools sort -@ {threads} -n {input} -o {output}
        # mv {output}.bam {output}"""

rule split_by_chrom:
    input:
        "{sample}/{sample}.bam"
        # lambda wildcards, attempt: attempt * 100
    output:
        temp("{sample}/{sample}_{chrom}.bam")
    threads: NTHREADS
    shell:
        "samtools view -@ {threads} -b {input} {wildcards.chrom} > {output}"
 
rule samtools_sort:
    priority: 100
              
    input:
        "bismark/{sample}/{sample}_sickle_bismark_bt2.bam"
    output:
        temp("{sample}/{sample}.bam")
    threads : NTHREADS
    shell:
        """
        samtools sort -@ {threads} {input} -o {output}
        # mv {output}.bam {output}
        samtools index {output}
        """
