# todo
# ensure the bam file is not empty after subset by chrom
# plot correlation between tuple lengths
# @todo fix MERGED2 to really split by tuple and by sample (!!) now all outputs are the same
# 
# 08 oct 2019

import os
# import glob
import re
import pandas as pd
from snakemake.utils import validate

configfile: "config.yaml"
validate(config, "schemas/config.schema.yaml")

Rbin = config['software']['Rbin']
CHROMS = config['params']['chromosomes']
MINCOVERAGE = config['params']['min_coverage']
NTHREADS = config['params']['num_threads']
TUPLE_LENGTHS = range(2, 10)

samples = pd.read_csv(config["samples"], sep = '\t').set_index("id", drop=False)

validate(samples, schema="schemas/samples.schema.yaml")

BAMS = samples.to_dict()['bam']

# METHTUPLE = expand("{sample}/qnsorted_{sample}_{chrom}.CG.{tuplelength}.tsv",
#                    tuplelength = TUPLE_LENGTHS,
#                    sample =  BAMS.keys(),
#                    chrom = CHROMS)

# ENTROPY_METHS = {os.path.splitext(os.path.basename(sample))[0] :
#                  expand("{sample}/{sample}_cov_{cov}_CG_{tuplelength}_entropy_and_meth_{chrom}.bed",
#                         sample = sample,
#                         cov = MINCOVERAGE,
#                         tuplelength = TUPLE_LENGTHS,
#                         chrom = CHROMS) for sample in BAMS}

MERGED = expand("{sample}/{sample}_cov_{cov}_CG_{tuplelength}_entropy_and_meth.bed.gz",
                  sample = BAMS.keys(),
                  cov = MINCOVERAGE,
                  tuplelength =  TUPLE_LENGTHS)

BY_SAMPLE_REPORTS = expand("{sample}/{sample}_cov_{cov}_by_sample_report.log",
                           sample = BAMS.keys(),
                           cov = MINCOVERAGE)

FINAL_REPORT = expand('cov_{cov}_across_samples_report.log',
                      cov = MINCOVERAGE)

print (BY_SAMPLE_REPORTS)
print ([MINCOVERAGE])

rule all:
    input:
        MERGED, BY_SAMPLE_REPORTS, FINAL_REPORT

rule across_samples_report:
    input:
        BY_SAMPLE_REPORTS
    params:
        cov = MINCOVERAGE
    output:
        FINAL_REPORT
    threads: NTHREADS
    shell:
        """
        # mkdir -p final_report
        
        {Rbin} src/postproc_report_all_samples.R \
            -c {params.cov} -i . \
            -o final_report -t {threads} | \
            tee cov_{params.cov}_across_samples_report.log
        """
        
rule by_sample_report:
    input:
        # sample = BAMS.keys() #,
        beds = expand("{sample}/{sample}_cov_{cov}_CG_{tuplelength}_entropy_and_meth.bed.gz",
               cov = MINCOVERAGE,
               tuplelength = TUPLE_LENGTHS,
               sample = BAMS.keys())
        
    params:
        cov = MINCOVERAGE
    output:
        BY_SAMPLE_REPORTS
    threads: NTHREADS
    run:
        # for curr in input.sample:
        for curr in BAM.keys():
            shell("""{Rbin} src/postproc_report_per_sample.R -s {curr} \
            -c {params.cov} -i {curr} \
            -o {curr} -t {threads} | \
            tee {curr}/{curr}_cov_{params.cov}_by_sample_report.log
            """)

rule merge_meth_and_entropies:
    # priority: 80
    input:
        expand("{{sample}}/{{sample}}_cov_{cov}_CG_{{tuplelength}}_entropy_and_meth_{chrom}.bed",
               cov = MINCOVERAGE,
               chrom = CHROMS)
        
    output:
        "{sample}/{sample}_cov_{cov}_CG_{tuplelength}_entropy_and_meth.bed.gz"
    shell:
        """
        # merge
        cat {input} | gzip > {output}
        """

    
rule compute_methylation_and_entropy:
    input:
        "{sample}/qnsorted_{sample}_{chrom}.CG.{tuplelength}.tsv"
    output:
        "{sample}/{sample}_cov_{MINCOVERAGE}_CG_{tuplelength}_entropy_and_meth_{chrom}.bed"
    shell:
        """
        # merge
        cat {input} | python src/entropy_stdin.py > {output}
        """
        
rule run_meththuple:
    priority: 80
    input:
        "{sample}/qnsorted_{sample}_{chrom}.bam",
    output:
        # temp("{sample}/qnsorted_{sample}_{chrom}.CG.{tuplelength}.tsv")
        temp("{sample}/qnsorted_{sample}_{chrom}.CG.{tuplelength}.tsv")
    shell: """
        set +u;
        # source ~/virtenvs/methtuple/bin/activate
        methtuple -m {wildcards.tuplelength} --methylation-type CG {input}    
        # deactivate
        set -u;
        """

rule sort_by_queryname:
    priority: 90
    input:
        "{sample}/{sample}_{chrom}.bam"
    output:
        temp("{sample}/qnsorted_{sample}_{chrom}.bam")
    threads: NTHREADS
    shell:
        """
        samtools sort -@ {threads} -n {input} -o {output}
        # mv {output}.bam {output}"""

rule split_by_chrom:
    input:
        "{sample}/{sample}.bam"
        # lambda wildcards, attempt: attempt * 100
    output:
        temp("{sample}/{sample}_{chrom}.bam")
    threads: NTHREADS
    shell:
        "samtools view -@ {threads} -b {input} {wildcards.chrom} > {output}"
 
rule samtools_sort:
    priority: 100
              
    input:
        "bismark/{sample}/{sample}_sickle_bismark_bt2.bam"
    output:
        temp("{sample}/{sample}.bam")
    threads : NTHREADS
    shell:
        """
        samtools sort -@ {threads} {input} -o {output}
        # mv {output}.bam {output}
        samtools index -@ {threads} {output}
        """
